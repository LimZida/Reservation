package adapter;

import org.apache.ibatis.exceptions.PersistenceException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.mcnc.bizmob.adapter.AbstractTemplateAdapter;
import com.mcnc.bizmob.adapter.DBAdapter;
import com.mcnc.bizmob.db.type.DBMap;
import com.mcnc.bizmob.hybrid.adapter.api.Adapter;
import com.mcnc.bizmob.hybrid.adapter.api.IAdapterJob;
import com.mcnc.bizmob.hybrid.common.server.JsonAdaptorObject;

import model.RES1320S1.RES1320S1Request;
import model.RES1320S1.RES1320S1Request_Body;
import model.RES1320S1.RES1320S1Response;
import model.RES1320S1.RES1320S1Response_Body;
import model.header.DMHeader;
import service.TimeChangeService;


/***
 *
 * <p> Title : 예약 상세 (종료)
 *
 * <p> Legacy System : DB
 *
 * <p> Description : 예약 상세 화면에서 예약자가 예약을 종료하는 전문
 *
 *
 * <p> Error Code : RES1320S1_ArrayIndexOutOfBoundsException	: reserveHour 값이 잘못되었을 경우 발생
 * 					RES1320S1_NullPointerException				: reserveHour 값이 Null일 경우 발생
 * 					RES1320S1_SeqERR							: reserveSeqPK 또는 userSeqPK가 잘못된 값이 들어오거나 null일 경우 발생
 * 					RES1320S1_ERR								: 그 외 오류 발생 시
 *
 * <p> Last Update Date : 2022.11.10
 *
 * @author LHY
 *
 */
@Adapter(trcode = { "RES1320S1" })
public class RES1320S1_Adapter extends AbstractTemplateAdapter implements IAdapterJob {

	private static final Logger logger = LoggerFactory.getLogger(RES1320S1_Adapter.class);
	@Autowired
	private DBAdapter dbAdapter;
	// 시간 변환
	@Autowired
	private TimeChangeService timeService;

	@SuppressWarnings("finally")
	public JsonAdaptorObject onProcess(JsonAdaptorObject obj) {
		// 요청 객체 생성
		RES1320S1Request		request		=	new RES1320S1Request(obj);
		// 요청 객체의 헤더 및 바디
		DMHeader				header		=	request.getHeader();
		RES1320S1Request_Body	reqBody		=	request.getBody();
		logger.debug("#### RES1320S1 reqBody :{}", reqBody);

		// 응답 객체 생성
		RES1320S1Response		response	=	new RES1320S1Response();
		RES1320S1Response_Body	resBody		=	new RES1320S1Response_Body();

		try {
			// 요청에서 받은 값(예약, 회원 일련번호)
			String trCode		=	header.getTrcode();
			String Hour			=	reqBody.getHour();
			int reserveSeqPK	=	reqBody.getReserveSeqPK();
			int userSeqPK		=	reqBody.getUserSeqPK();

			// DBMap에 예약 일련번호(reserveSeqPK), 회원 일련번호(userSeqPK) 저장
			DBMap 	reqMap	=	new DBMap();
			reqMap.put("reserveSeqPK",	reserveSeqPK);
			reqMap.put("userSeqPK",		userSeqPK);

			// Reserve 테이블에서 예약 일련번호(reserveSeqPK)와 회원 일련번호(userSeqPK)에
			// 해당하는 예약내역 selectOne으로 받아오기
			RES1320S1Response_Body reserveResult = dbAdapter.selectOne("eduDB", trCode + ".SELECT_TIME_INFO", reqMap, RES1320S1Response_Body.class);

			// 응답(실패)
			if(reserveResult == null) {
				logger.error("#### DB:{}","RES1320S1 예약내역 SelectOne 결과 없음");
				logger.error("#### " + header.getTrcode() + "_SeqERR : userSeq 또는 reserveSeq가 잘못된 값이거나 Null 입니다.");

				resBody.setFlag(false);
				resBody.setReserveEndCheck("예약 종료 실패");
			}
			// 응답(성공)
			else {
				// 취소하려는 예약내역의 종료시간
				String reserveEnd = reserveResult.getReserveEnd();
				// 취소하려는 예약내역의 시간 수정
				reserveEnd = timeService.makeTimeChange(reserveEnd,Hour);
				reqMap.put("reserveEnd", reserveEnd);

				// Reserve 테이블에서 해당 예역 내역 시간과 예약 종료여부 Update
				int timeUpdateResult = dbAdapter.update("eduDB", trCode + ".UPDATE_TIME_INFO", reqMap);
				// 응답(실패)
				if(timeUpdateResult<1) {
					logger.error("#### DB:{}", "RES1320S1 update 실패");

					resBody.setFlag(false);
					resBody.setReserveEndCheck("예약 종료 실패");
				}
				// 응답(성공)
				else {
					logger.debug("#### DB:{}", "RES1320S1 update 성공");

					resBody.setFlag(true);
					resBody.setReserveEndCheck("해당 회의는 " + reserveEnd + "에 종료하는 것으로 바뀌었습니다.");
				}
			}
		}
		// 예외처리
		catch(PersistenceException e) {
			logger.error("#### {}", header.getTrcode() +
			"_ERR : 쿼리문 오류입니다. (매핑 or 표현 오류) =>"+e.getClass().getName()+" "+e.getMessage());
			header.setError_text(header.getTrcode() +"  쿼리문 오류입니다. (매핑 or 표현 오류) ");
		}
		catch(ArrayIndexOutOfBoundsException e) {
			logger.error("#### " + header.getTrcode() + "_ArrayIndexOutOfBoundsException : 옳지 않은 배열의 접근입니다.");
			header.setError_text(header.getTrcode() +"  옳지 않은 배열의 접근입니다. ");
		}
		catch (IllegalArgumentException e) {
			logger.error("#### " + header.getTrcode() + "_IllegalArgumentException : 잘못된 Parameter를 전송하였습니다.");
			header.setError_text(header.getTrcode() +"  잘못된 Parameter를 전송하였습니다. ");
		}
		catch(NullPointerException e) {
			logger.error("#### " + header.getTrcode() + "_NullPointerException : Hour(종료 버튼을 누른 시간)이 잘못된 값이거나 Null 입니다.");
			header.setError_text(header.getTrcode() +"  Hour(종료 버튼을 누른 시간)이 잘못된 값이거나 Null 입니다.");
		}
		catch(Exception e){
			logger.error("#### " + header.getTrcode() + "_ERR : 그 외 오류 발생.");
			logger.error("#### " + header.getTrcode() + "_ERR : 어댑터에서 로직 처리 Exception 에러가 발생하였습니다. Ex)SQLException , IOException => " + e.getStackTrace());
			header.setError_text(header.getTrcode() +" 어댑터에서 로직 처리 Exception 에러가 발생하였습니다. Ex)SQLException , IOException");
			return makeFailResponse(header.getTrcode() + "EXCEPTION"," 어댑터에서 로직 처리 Exception 에러가 발생하였습니다. Ex)SQLException , IOException");
		}
		finally {
			response.setHeader(header);
			response.setBody(resBody);
			return makeResponse(obj,response.toJsonNode());
		}
	}

}
